swagger: "2.0"
info:
  description: "This is an API of a parking lot, where you can visualize the different actions that will be allowed to perform"
  version: "1.0.0"
  title: "API Parking"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "noithyung1525@gmail.com"
host: "localhost:5000"
basePath: "/"
tags:
- name: "vehicle"
  description: "Access to Vehicle information"
- name: "parking"
  description: "Access to Parking information"
- name: "Invoice"
  description: "Access to Invoice information"
- name: "user"
  description: "Operations about user"
schemes:
- "http"
- "https"
paths:
  /vehicle:
    get:
      tags:
      - "vehicle"
      summary: "Find all vehicles"
      description: "Returns a JSON file with the vehicle information which is id, plate, type and color of the vehicle."
      operationId: "getVehicles"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VehicleShow"
        "400":
          description: "Invalid status value"
        "404":
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "A message for the not found vehicles"
            example:
              msg: "Vehicles not found"
  /vehicle/{vehicleId}:
    get:
      tags:
      - "vehicle"
      summary: "Find vehicle by ID"
      description: "Return a JSON file with the vehicle information which is id, plate, type and color of the vehicle."
      operationId: "getVehicle"
      produces:
      - "application/json"
      parameters: 
        - name: "vehicleId"
          in: "path"
          description: "ID of vehicle to return"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VehicleShow"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Vehicle not found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/VehicleNotFound'
    put:
      tags:
      - "vehicle"
      summary: "Update an existing vehicle"
      description: "Update a vehicle that already exists, by sending a JSON file"
      operationId: "updateVehicle"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "vehicleId"
        in: "path"
        description: "ID that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Vehicle object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Vehicle"
      responses:
        "200":
          description: "Vehicle succesfully upgraded"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Vehicle successfully upgraded"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Vehicle not found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/VehicleNotFound'
        "405":
          description: "Validation exception"
    delete:
      tags:
      - "vehicle"
      summary: "Delete purchase vehicle by ID"
      description: "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
      operationId: "deleteVehicle"
      produces:
      - "application/json"
      parameters:
      - name: "vehicleId"
        in: "path"
        description: "ID of the vehicle that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
      responses:
        "204":
          description: "Vehicle successfully removed"
        "404":
          description: "Vehicle not found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/VehicleNotFound'
  /vehicle/add-vehicle:
    post:
      tags:
      - "vehicle"
      summary: "Add a new vehicle to the database"
      description: "Send JSON file with vehicle information"
      operationId: "postAddVehicle"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Vehicle object to be added to database"
        required: true
        schema:
          $ref: "#/definitions/Vehicle"
      responses:
        "200":
          description: "Vehicle added"
        "405":
          description: "Invalid input"
        "500":
          description: "Some server Error"
  /vehicle/add-color:
    post:
      tags:
      - "vehicle"
      summary: "Add a new color to the database"
      description: "Send JSON file with color information"
      operationId: "postColor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Vehicle color object to be added to database"
        required: true
        schema:
          $ref: "#/definitions/Color"
      responses:
        "200":
          description: "Color added"
        "405":
          description: "Invalid input"
        "500":
          description: "Some server Error"
  /vehicle/colors:
    get:
      tags:
      - "vehicle"
      summary: "Find all vehicle colors"
      description: "Returns a JSON file with the vehicle colors."
      operationId: "getColors"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Color"
        "400":
          description: "Invalid status value"
      security:
      - api_key: []
  /vehicle/add-type:
    post:
      tags:
      - "vehicle"
      summary: "Add a new type to the database"
      description: ""
      operationId: "postType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Vehicle type object to be added to database"
        required: true
        schema:
          $ref: "#/definitions/TypeCar"
      responses:
        "200":
          description: "Type added"
        "405":
          description: "Invalid input"
      security:
      - api_key: []
  /vehicle/types:
    get:
      tags:
      - "vehicle"
      summary: "Find all vehicle types"
      description: "Returns a JSON file with the vehicle Types."
      operationId: "getTypes"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TypeCar"
        "400":
          description: "Invalid status value"
      security:
      - api_key: []
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  Vehicle:
    type: "object"
    required:
    - "plate"
    - "typeCar"
    - "color"
    properties:
      id:
        type: "integer"
        example: 6
      vehicleColorId:
        type: "integer"
        example: 4
      vehicleTypeId:
        type: "integer"
        example: 1
      plate:
        type: "string"
        example: "AWS830"
      status:
        type: "boolean"
        description: "vehicle status in the parking"
        example: true
  VehicleShow:
    type: "object"
    required:
    - "plate"
    - "typeCar"
    - "color"
    properties:
      id:
        type: "integer"
        example: 6
      vehicleType:
        $ref: "#/definitions/TypeCar"
      vehicleColor:
        $ref: "#/definitions/Color"
      plate:
        type: "string"
        example: "AWS830"
      status:
        type: "boolean"
        description: "vehicle status in the parking"
        example: true
  VehicleNotFound:
    type: "object"
    properties:
      msg:
        type: "string"
        description: "A message for the not found vehicles"
    example:
      msg: "Vehicle not found"
  Color:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 2
      color:
        type: "string"
        example: "White"
  TypeCar:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 3
      typeCar:
        type: "string"
        example: "trunk"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
    xml:
      name: "Tag"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"